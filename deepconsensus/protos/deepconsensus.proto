// Copyright (c) 2021, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package deepconsensus;

import "nucleus/protos/bed.proto";

// A message containing information about a CCS subread.
message Subread {
  // Each molecule name is of the format '<movieName>/<zmw>'. Each movie is
  // assigned a name: "m<machineId>_<YYMMDD>_<uniqueId>". Zero-mode
  // waveguides (ZMWs) are holes in the PacBio SMRT Cell silicon chip where a
  // sequencing reaction occurs. Each ZMW in the chip has a unique number.
  // <internal>
  // it is now present in DeepConsensusInput.
  string molecule_name = 1;

  // Read sequence. Gaps may be introduced from multiple sequence alignment at
  // positions where other reads contain insertions and optionally, soft clips.
  string bases = 2;

  // CIGAR string with expanded operations (i.e. '3M' is changed to 'MMM').
  // Gaps may be introduced from multiple sequence alignment at positions where
  // other reads contain insertions and optionally, soft clips.
  //
  // As a first step, we are using subreads aligned to the output of PacBio's
  // CCS algorithm. We will eventually want to remove information from PacBio's
  // CCS output. One alternative is to align subreads to the first subread.
  // <internal>
  string expanded_cigar = 3;

  // Pulse width. For each position in the MSA sequence, a value output by the
  // basecaller representing the pulse length of raw signal. May have zeroes at
  // at positions corresponding to gaps in the multiple sequence alignment.
  repeated int32 pw = 4;

  // Interpulse distance. For each position in the MSA sequence, a value output
  // by the basecaller representing the number of frames between adjacent
  // pulses. May have zeroes at positions corresponding to gaps in the multiple
  // sequence alignment.
  repeated int32 ip = 5;

  // Position of each base in the reference genome. Only used for label.
  repeated int32 base_positions = 6;

  // For each subread position, the end index for slicing the corresponding
  // region in the label.
  repeated int32 subread_indices = 7;

  // Retrieved from read.alignment.position.reverse_strand
  enum SubreadStrandEnum {
    NO_STRAND = 0;
    FORWARD = 1;
    REVERSE = 2;
  }
  SubreadStrandEnum subread_strand = 8;
}

// Container for Subreads and metadata corresponding to one input example.
message DeepConsensusInput {
  // For a given molecule, the portions of subreads that fall between
  // molecule_start (inclusive) and molecule_end (exclusive) after expansion and
  // multiple sequence alignment.
  repeated Subread subreads = 1;

  // The true sequence for this molecule based on the reference genome. We
  // currently align the truth to PacBio's CCS output and perform a multiple
  // sequence alignment for the subreads and label.
  // <internal>
  //
  // Note, label is not technically a CCS subread as it does not have pulse
  // width and interpulse distance fields.
  Subread label = 2;

  // Each molecule name is of the format '<movieName>/<zmw>'. Each movie is
  // assigned a name: "m<machineId>_<YYMMDD>_<uniqueId>". Zero-mode
  // waveguides (ZMWs) are holes in the PacBio SMRT Cell silicon chip where a
  // sequencing reaction occurs. Each ZMW in the chip has a unique number.
  string molecule_name = 3;

  // 0-indexed start position of this window in the expanded subread sequences.
  // May be different than start position in the unexpanded sequence, which does
  // not contain gaps from multiple sequence alignment and may thus be shorter.
  //
  // There will be multiple DeepConsensusInput protos for each molecule. This
  // position will be used to order all protos for a given molecule and
  // stitch together the final sequence.
  int32 molecule_start = 4;

  // Chromosome corresponding to this molecule, which is not captured by
  // molecule_name.
  string chrom_name = 5;

  // 0-indexed. Genomic start position of the molecule on the chromosome
  // specified by chrom_name.
  int32 chrom_start = 6;

  // 0-indexed. Genomic end position of the molecule on the chromosome
  // specified by chrom_name. chrom_name and/or chrom_end will be used to
  // split molecules into train/eval/test sets.
  int32 chrom_end = 7;

  // A signal to noise ratio for each base (A, T, C, G). The basecaller produces
  // four values for a given molecule.
  repeated float sn = 8;

  // The strand on the genome that the record is on.
  nucleus.genomics.v1.BedRecord.Strand strand = 9;

  // Predicted sequence from the DeepConsensus model.
  string deepconsensus_prediction = 10;

  // For each subread position, the end index for slicing the corresponding
  // region in the label.
  repeated int32 subread_indices = 11;

  // CCS sequence to which the subreads are aligned. Optional. Will only be
  // filled if the CCS FASTA is supplied when running generate_input.
  string ccs_sequence = 12;

  // Mapping from indices in the molecule to the number of unsupported
  // insertions. This mapping is only stored for the full molecule, not windows.
  // We only keep track of positions with at least one unsupported insertion.
  map<int32, int32> unsup_insertions_by_pos = 13;

  // The number of unsupported insertions in the DeepConsensusInput. These are
  // positions where the label has a base for which there is no support in the
  // subreads. This is only stored for windows, not the full molecule.
  int32 unsup_insertion_count = 14;

  // Predicted quality string for each base in deepcosensus_prediction.
  string quality_string = 15;
}
